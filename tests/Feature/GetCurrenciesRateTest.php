<?php

namespace Tests\Feature;

use App\Models\User;
use Illuminate\Support\Facades\Http;
use Tests\TestCase;

class GetCurrenciesRateTest extends TestCase
{
    protected array $currencies;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = User::factory()->create();
        $this->actingAs($user, 'api');

        // Mock nomics endpoints
        $nomicsCurrencyDetailPath = sprintf('%s%s*', config('nomics.api_url'), 'currencies/ticker');

        $this->currencies = [
            [
                'name' => 'the-currency-name',
                'currency' => 'the-currency-symbol',
                'price' => 1200,
                'status' => 'active',
            ]
        ];


        Http::fake([
            $nomicsCurrencyDetailPath => Http::response($this->currencies),
        ]);
    }

    public function test_ids_is_required(): void
    {
        $parameters = [
            'per-page' => 1
        ];

        $response = $this->json('get', route('nomics.currencies.rate', $parameters));

        $response->assertJsonValidationErrors(['ids']);
    }

    public function test_per_page_should_be_numeric(): void
    {
        $parameters['per-page'] = 'non-numeric';

        $response = $this->json('get', route('nomics.currencies.rate', $parameters));
        $response->assertJsonValidationErrors(['per-page']);
    }

    public function test_page_page_should_be_greater_than_zero()
    {
        $parameters['per-page'] = '0';

        $response = $this->json('get', route('nomics.currencies.rate', $parameters));
        $response->assertJsonValidationErrors(['per-page']);
    }

    public function test_per_page_is_optional(): void
    {
        $parameters = ['ids' => 'BTC'];
        $response = $this->json('get', route('nomics.currencies.rate', $parameters));
        $response->assertJsonMissingValidationErrors(['per-page']);

        $parameters = ['ids' => 'BTC', 'per-page' => 1];
        $response = $this->json('get', route('nomics.currencies.rate', $parameters));
        $response->assertJsonMissingValidationErrors(['per-page']);
    }

    public function test_should_return_the_currency_detail(): void
    {
        $response = $this->json('get', route('nomics.currencies.rate', [
            'ids' => 'the-currency-id',
            'per-page' => 1,
        ]));

        $response->assertJson($this->currencies);
    }
}
